
Name: Xueying Sui
Last 4 digits ID: 2442
Computer IP address:
CSE 6331, Cloud Computing					


Quiz Q2, 6.00, Summer 2019   (c) DL, UTA, 2019


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4. Using the cloud services provider, all functionality possible should be implemented on that provider.
    (Of course, displaying web pages through a browser and the user interface is "local")
    The cloud service provider is IBM Cloud (BlueMix).
  
Show and submit code, when each part is complete, raise your hand and then show us:

 5. Show a web page and interface (which resides on the cloud provider) with your student ID followed by your
    last name then comma then first name (as it appears on your student ID), in large font at the top of every web page displayed 
    (for this quiz)
    Upload the earthquake data ("quakes") to cloud service, and import into a relational DB (SQL).
    Then, below your name and ID, show the total number of earthquakes ("quakes") in the data set, 
    and give the smallest one ("mag"), that is greater than 2.0 (the minimum in the data set, greater than 2.0)
    and its location (the name, the "place" location).  
<div class="container">
    <h1>1001682442 Sui,Xueying</h1>
</div>

 <form action="/home" method="POST">
        <input name="point" value="ss" style="display:none;">
        <button class="btn btn-default" type="submit">View the smallest one</button>
    </form>
            elif request.form['point'] == 'ss':
            sub_data = []
            min=10
            for item in data:
                if item[5] and 2.0<item[5]<min:
                    sub_data = []
                    min=item[5]
                    sub_data.append(item)
            return render_template('home.html', result=sub_data, k=len(sub_data))





 6. Through a web interface (page), allow a user to give two depth values and an increment (for example 4.0, 10.0, and 2) 
    and show the number of quakes between those depth values in increments given (that is, for the example, 
    all quakes, mag 4 to 6, 6 to 8, 8 to 10), show the number of quakes in EACH interval.
<div class="container">
    <form action="/home" method="POST">
        <input name="point" value="two" style="display:none;"/>
        <div class="input-group">
            <span class="input-group-btn">
                <input type="text" class="form-control" style="width:15%;" placeholder="input minimum depth" name="start"/>
                <input type="text" class="form-control" style="width:15%;" placeholder="input maximum depth" name="end"/>
                <input type="text" class="form-control" style="width:15%;" placeholder="input increment" name="inc"/>
            </span>
            <span class="input-group-btn">
                <button class="btn btn-default" type="submit">Search</button>
            </span>
        </div>
    </form>
</div>

        elif request.form['point'] == 'two':
            inc_data=[]
            sub_data = []
            start=int(request.form["start"])
            inc=int(request.form["inc"])
            end=int(request.form["end"])
            while start<end:
                subdata=[]
                if start+inc<end:
                    tmp=start+inc
                else:
                    tmp=end
                incdata=[]
                incdata.append(start)
                incdata.append(tmp)
                inc_data.append(incdata)
                for item in data:
                    if item[4] and start <= item[4] <= tmp:
                        subdata.append(item)
                sub_data.append(subdata)
                start+=inc
            k=[]
            for i in range(len(sub_data)):
                k.append(len(sub_data[i]))
            return render_template('range.html', result=sub_data, inc_data=inc_data, k=k, len=len(k))
 <div class="container">
    <h1>1001682442 Sui,Xueying</h1>
</div>

<div class="container">
    {%for incdata in inc_data%} <h5> {{incdata}}</h5>{% endfor %}
{%for ki in k%} <h5> {{ki}}</h5>{% endfor %}

     {%for res in result%}
    <table class="table" border="1">
        <tr><th>time</th><th>latitude</th><th>longitude</th><th>depth</th><th>mag</th><th>rms</th><th>place</th></tr>

        {%for re in res%}
        <tr>
            <td>{{re[1]}}</td>
            <td>{{re[2]}}</td>
            <td>{{re[3]}}</td>
            <td>{{re[4]}}</td>
            <td>{{re[5]}}</td>
            <td>{{re[6]}}</td>
            <td>{{re[7]}}</td>
        </tr>
            {% endfor %}

    </table>

{% endfor %}
</div>




 7. Through a web interface (page), allow a user to give two location values (lat and long for two different locations) 
    and show (list) the lat, long, and place (name), for every earthquake in that area (box).
<div class="container">
    <form action="/home" method="POST">
        <input name="point" value="twoloc" style="display:none;"/>
        <div class="input-group">
            <span class="input-group-btn">
                <input type="text" class="form-control" style="width:15%;" placeholder="input first lat" name="lat"/>
                <input type="text" class="form-control" style="width:15%;" placeholder="input first long" name="long"/>
                <input type="text" class="form-control" style="width:15%;" placeholder="input second lat" name="lat1"/>
                <input type="text" class="form-control" style="width:15%;" placeholder="input second long" name="long1"/>
            </span>
            <span class="input-group-btn">
                <button class="btn btn-default" type="submit">Search</button>
            </span>
        </div>
    </form>
</div>
        elif request.form['point'] == 'twoloc':
            sub_data = []
            for item in data:
                if item[2] and item[3] and float(request.form['lat']) <item[2]<float(request.form['lat1']) and \
                        float(request.form['long']) <item[3]<float(request.form['long1']):
                    sub_data.append(item)
            return render_template('home.html', result=sub_data, k=len(sub_data))


 8. Through a web interface (page), allow a user to give a date range in Z (GMT) (that is, two dates)
    and a depth range, and modify all earthquakes within that range, to contain a mag of "999". 
    Then show number of tuples (records) changed.

 9.  Through a web interface (page), allow a user to give a location description (for example "Arctic Village")
     OR a lat, long, and a distance (for example 200 km), and find all quakes within that distance of the location.
     (If the location says 69 km NW of Arctic Village, ignore the 69 km NW part, just treat the location of Arctic Village 
     as the matching lat, long, in this case 68.5294, -146.8218)
<div class="container">
    <form action="/home" method="POST">
        <input name="point" value="both" style="display:none;">
        <div class="input-group">
      <input type="text" class="form-control" style="width:40%;" placeholder="5km" name="dist">
        <input type="text" class="form-control" style="width:60%;" placeholder="Amatignak Island" name="name">
            <span class="input-group-btn">
        <button class="btn btn-default" type="submit">Search</button>
            </span>
        </div>
    </form>
</div>

        elif request.form['point'] == 'both':
            sub_data = []
            for item in data:
                if request.form["dist"] == item[7][0:len(request.form["dist"])]:
                    if request.form["name"].lower() in item[7].lower():
                        sub_data.append(item)
            return render_template('home.html', result=sub_data, k=len(sub_data))

 10. Show GTA parts 5, 6, 7, 8, 9

 11. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

